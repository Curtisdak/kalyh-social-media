// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String          @id
  username             String          @unique
  avatar               String?
  cover                String?
  name                 String?
  surname              String?
  bio                  String?
  city                 String?
  school               String?
  work                 String?
  website              String?
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  posts                Post[]
  comments             Comment[]
  likes                Like[]
  followers            Follow[]        @relation("UserFollowers")
  followings           Follow[]        @relation("UserFollowings")
  followRequestSent    FollowRequest[] @relation("SenderRequest")
  followRequestreceive FollowRequest[] @relation("ReceiverRequest")
  blocker              Block[]         @relation("Blocker")
  blocked              Block[]         @relation("Blocked")
  stories              Story[]
}

model Post {
  id        Int       @id @default(autoincrement())
  desc      String
  img       String?
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  comments  Comment[]
  likes     Like[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Comment {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  likes     Like[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int?
  createdAt DateTime @default(now())
  Comment   Comment? @relation(fields: [commentId], references: [id])
  commentId Int?
}

model Follow {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  follower    User     @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String
  following   User     @relation("UserFollowings", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String
}

model FollowRequest {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  sender     User     @relation("SenderRequest", fields: [senderId], references: [id], onDelete: Cascade)
  senderId   String
  receiver   User     @relation("ReceiverRequest", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId String

  @@unique([senderId, receiverId])
}

model Block {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  blocker   User     @relation("Blocker", fields: [blockerId], references: [id], onDelete: Cascade)
  blockerId String
  blocked   User     @relation("Blocked", fields: [blockedId], references: [id], onDelete: Cascade)
  blockedId String

  @@unique([blockerId, blockedId])
}

model Story {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  expireAt  DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
  img       String
}
